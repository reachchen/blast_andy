package greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import geendao.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "com_yhbc_tablet_bean_UserInfo".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "com_yhbc_tablet_bean_UserInfo";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, Long.class, "uid", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "id");
        public final static Property Username = new Property(2, String.class, "username", false, "username");
        public final static Property Password = new Property(3, String.class, "password", false, "password");
        public final static Property Index1 = new Property(4, int.class, "index1", false, "index1");
        public final static Property Index2 = new Property(5, int.class, "index2", false, "index2");
        public final static Property Date1 = new Property(6, String.class, "date1", false, "date1");
        public final static Property Big_logo = new Property(7, String.class, "big_logo", false, "big_logo");
        public final static Property Min_logo = new Property(8, String.class, "min_logo", false, "min_logo");
        public final static Property Nick = new Property(9, String.class, "nick", false, "nick");
        public final static Property Address = new Property(10, String.class, "address", false, "address");
        public final static Property ParentId = new Property(11, Long.class, "parentId", false, "parentId");
        public final static Property AlipayUserId = new Property(12, String.class, "alipayUserId", false, "alipayUserId");
        public final static Property IsActive = new Property(13, Integer.class, "isActive", false, "isActive");
        public final static Property Contact_phone = new Property(14, String.class, "contact_phone", false, "contact_phone");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"com_yhbc_tablet_bean_UserInfo\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: uid
                "\"id\" INTEGER NOT NULL ," + // 1: id
                "\"username\" TEXT," + // 2: username
                "\"password\" TEXT," + // 3: password
                "\"index1\" INTEGER NOT NULL ," + // 4: index1
                "\"index2\" INTEGER NOT NULL ," + // 5: index2
                "\"date1\" TEXT," + // 6: date1
                "\"big_logo\" TEXT," + // 7: big_logo
                "\"min_logo\" TEXT," + // 8: min_logo
                "\"nick\" TEXT," + // 9: nick
                "\"address\" TEXT," + // 10: address
                "\"parentId\" INTEGER," + // 11: parentId
                "\"alipayUserId\" TEXT," + // 12: alipayUserId
                "\"isActive\" INTEGER," + // 13: isActive
                "\"contact_phone\" TEXT);"); // 14: contact_phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"com_yhbc_tablet_bean_UserInfo\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getIndex1());
        stmt.bindLong(6, entity.getIndex2());
 
        String date1 = entity.getDate1();
        if (date1 != null) {
            stmt.bindString(7, date1);
        }
 
        String big_logo = entity.getBig_logo();
        if (big_logo != null) {
            stmt.bindString(8, big_logo);
        }
 
        String min_logo = entity.getMin_logo();
        if (min_logo != null) {
            stmt.bindString(9, min_logo);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(10, nick);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(12, parentId);
        }
 
        String alipayUserId = entity.getAlipayUserId();
        if (alipayUserId != null) {
            stmt.bindString(13, alipayUserId);
        }
 
        Integer isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(14, isActive);
        }
 
        String contact_phone = entity.getContact_phone();
        if (contact_phone != null) {
            stmt.bindString(15, contact_phone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long uid = entity.getUid();
        if (uid != null) {
            stmt.bindLong(1, uid);
        }
        stmt.bindLong(2, entity.getId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
        stmt.bindLong(5, entity.getIndex1());
        stmt.bindLong(6, entity.getIndex2());
 
        String date1 = entity.getDate1();
        if (date1 != null) {
            stmt.bindString(7, date1);
        }
 
        String big_logo = entity.getBig_logo();
        if (big_logo != null) {
            stmt.bindString(8, big_logo);
        }
 
        String min_logo = entity.getMin_logo();
        if (min_logo != null) {
            stmt.bindString(9, min_logo);
        }
 
        String nick = entity.getNick();
        if (nick != null) {
            stmt.bindString(10, nick);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(11, address);
        }
 
        Long parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindLong(12, parentId);
        }
 
        String alipayUserId = entity.getAlipayUserId();
        if (alipayUserId != null) {
            stmt.bindString(13, alipayUserId);
        }
 
        Integer isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(14, isActive);
        }
 
        String contact_phone = entity.getContact_phone();
        if (contact_phone != null) {
            stmt.bindString(15, contact_phone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uid
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.getInt(offset + 4), // index1
            cursor.getInt(offset + 5), // index2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date1
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // big_logo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // min_logo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // nick
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // address
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11), // parentId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // alipayUserId
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // isActive
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // contact_phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIndex1(cursor.getInt(offset + 4));
        entity.setIndex2(cursor.getInt(offset + 5));
        entity.setDate1(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBig_logo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMin_logo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setNick(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setParentId(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
        entity.setAlipayUserId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsActive(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setContact_phone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
